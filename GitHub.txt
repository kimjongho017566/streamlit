import streamlit as st
from datetime import datetime
from datetime import date
import pandas as pd

# 경고메시지 제거 및 아이콘 및 페이지 이름 설정
st.set_page_config(
    page_title="환영해요",  # 페이지 이름 설정
    page_icon="🌟",  # 원하는 아이콘 이모지 또는 이미지 경로 설정
    layout="wide"
)

######################## 상단 markdown style 정의 ############################

st.markdown("""
    <style>
    .main-title {
        font-size:50px !important;
        color: #000000; /* 검정색 */
        text-align: center;
        font-weight: bold;
        font-family: 'Arial', sans-serif;
    }
    </style>
    """, unsafe_allow_html=True)

st.markdown('<p class="main-title">🌟공간에 오신 것을 환영합니다 🌟</p>', unsafe_allow_html=True)
st.markdown("[여기를 눌러 Manual로 이동하세요](https://github.com/)")

##########################################################################

# 초기 세션 상태 설정 (최초 실행 시 페이지 상태 저장)
if "current_page" not in st.session_state:
    st.session_state.current_page = "데이터 검색"
    st.session_state.search_button = 0  # 데이터 검색/서치 버튼 초기화

# 사이드바에 버튼을 추가하여 페이지 선택
st.sidebar.markdown("### 페이지 선택")
if st.sidebar.button("홈"):
    st.session_state.current_page = "홈"
    st.session_state.search_button = 0  # 데이터 검색/서치 버튼 초기화
if st.sidebar.button("데이터 검색"):
    st.session_state.current_page = "데이터 검색"
    st.session_state.search_button = 0  # 데이터 검색/서치 버튼 초기화
if st.sidebar.button("기타 정보"):
    st.session_state.current_page = "기타 정보"
    st.session_state.search_button = 0  # 데이터 검색/서치 버튼 초기화

# 페이지 선택에 따른 컨텐츠 표시
if st.session_state.current_page == "홈":
    st.write("홈 페이지에 오신 것을 환영합니다!")
    st.write("여기에서 전체 개요와 안내를 확인할 수 있습니다.")

elif st.session_state.current_page == "데이터 검색":
    # Form 생성
    with st.form("search_form"):
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            combo_menu = st.selectbox('**아래 Option Menu를 선택해주세요**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='menu')

        with col2:
            combo_line = st.selectbox('**LINE 선택**', ['15L', '16L'], key='line')

        with col3:
            combo_eqpid = st.selectbox('**EQP_ID 선택**', ['설비1', '설비2'], key='eqpid')

        with col4:
            selected_date = st.date_input("**계측완료 날짜**", value=date.today())

        _, _, col1 = st.columns([3, 0.4, 0.3])  # 첫 번째 열을 더 크게 해서 버튼이 오른쪽에 배치되도록 설정

        with col1:
            # Search 버튼 추가 (오른쪽에 배치)
            search_button = st.form_submit_button("SEARCH")

    st.markdown("---")  # 수평선

    # SEARCH 버튼이 눌리면 세션 상태에 저장하여 리렌더링 방지
    if search_button:
        st.session_state.search_button = 1
        # 데이터 조회하기, 쿼리 작성 후 조회
        data_df = pd.DataFrame(
            {
                "EQP_ID": ["설비1", "설비2", "설비3", "설비4"],
                "계측완료시간": ["2024-10-7-12:00", "2024-10-8-12:00", "2024-10-9-12:00", "2024-10-10-12:00"],
                "정리할 DATA 선택(1개만)": [True, False, False, True],
                "SPEC 설정": ["정상", "정상", "오류", "오류"]  # 콤보박스 항목으로 사용될 열
            }
        )

        # 선택된 날짜를 데이터프레임의 '계측완료시간'과 비교하여 필터링
        filtered_data = data_df[data_df['계측완료시간'].str.contains(str(selected_date))]

        # 필터링된 데이터를 세션 상태에 저장
        st.session_state.filtered_data = filtered_data

    # 세션 상태에 저장된 데이터가 있으면 그리기
    if st.session_state.search_button == 1 and "filtered_data" in st.session_state and not st.session_state.filtered_data.empty:
        
        # Form 생성
        with st.form("DATA_FORM"):
            
            # 필터링된 데이터 및 시간 표시
            st.write(f"필터링된 데이터 : {combo_menu}, {combo_line} , {combo_eqpid} , {selected_date} || 검색 시간 : {datetime.now()}")

            col1, col2, col3, col4, col5 = st.columns(5)

            with col1:
                if (combo_menu =='EBR') or (combo_menu =='EBR(WEE)'): data_combo_1 = st.selectbox('**EBR_SPEC(L)**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='EBR_SPEC(L)')
                if combo_menu =='WEE': data_combo_1 = st.selectbox('**EBR_SPEC(L)**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='WEE_SPEC(L)')
                if combo_menu =='TPR': data_combo_1 = st.selectbox('**MAIN_EQP_ID**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='MAIN_EQP_ID')
                if combo_menu =='XPS': data_combo_1 = st.selectbox('**MAIN_EQP_MODEL**', ['LITHIUS', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='MAIN_EQP_MODEL')
            with col2:
                if (combo_menu =='EBR') or (combo_menu =='EBR(WEE)') :data_combo_2 = st.selectbox('**EBR_SPEC(H)**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='EBR_SPEC(H)')
            with col3:
                if combo_menu =='EBR(WEE)' : data_combo_3 = st.selectbox('**WEE_SPEC(L)**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='WEE SPEC(L)')
            with col4:
                if combo_menu =='EBR(WEE)' : data_combo_3 = st.selectbox('**WEE_SPEC(H)**', ['EBR', 'EBR(WEE)', 'WEE', 'TPR', 'XPS'], key='WEE SPEC(H)')

            edited_data = st.data_editor(
                st.session_state.filtered_data,
                column_config={
                    "정리할 DATA 선택(1개만)": st.column_config.CheckboxColumn(
                        "DATA는 1개만 선택하세요",
                        help="원하는 데이터를 선택하세요",
                        default=False,
                    ),
                    "SPEC 설정": st.column_config.SelectboxColumn(  # 콤보박스 열을 추가
                        "SPEC 설정",
                        options=["정상", "오류", "점검 중"],  # 콤보박스 옵션
                        help="상태를 선택하세요",
                    )
                },
                disabled=["EQP_ID", "계측완료시간"],  # EQP_ID 열은 수정 불가
                hide_index=True,
            )    

            _, _, col1 = st.columns([3, 0.4, 0.5])  # 첫 번째 열을 더 크게 해서 버튼이 오른쪽에 배치되도록 설정

            with col1:
                search_button = st.form_submit_button("DATA 정리하기")


    elif st.session_state.search_button == 1 and ("filtered_data" not in st.session_state or st.session_state.filtered_data.empty):
        st.markdown("**DATA가 존재하지 않습니다**")
        st.markdown("**다시 시도하거나, 담당자에게 문의 부탁드립니다.**")

elif st.session_state.current_page == "기타 정보":
    st.write("기타 정보 페이지에 오신 것을 환영합니다.")
    st.write("이곳에서 추가적인 정보를 확인할 수 있습니다.")

